const router = require('express').Router(); 
const Holiday = require("../../models/holiday.model");
const asyncHandler = require('express-async-handler');
const { collection,addDoc,doc,updateDoc,arrayUnion,getDoc,getDocs,arrayRemove,where,query} = require('firebase/firestore');
const { initializeApp } = require('firebase/app');
const { getFirestore } = require('firebase/firestore');
const { runTransaction } = require('firebase/firestore');
const axios = require('axios');
const firebaseConfig = require('../../config/firebase');
const firebaseApp = initializeApp(firebaseConfig);
const db = getFirestore(firebaseApp);


router.post('/createHoliday', asyncHandler(async (req, res) => {
    try {   
        const LINE_ACCESS_TOKEN = process.env.LINE_ACCESS_TOKEN; 
        const LINE_BOT_API = "https://api.line.me/v2/bot/message"; 
        const headers = {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${LINE_ACCESS_TOKEN}` 
        }
        const appointmentCollection = collection(db,"appointment");
        const snapShotAppointment = await getDocs(query(appointmentCollection, where("appointmentDate","==", `${req.body.date}`)))
        const exitsAppointment = snapShotAppointment.docs.map((doc) => {
            const appointmentData = doc.data();
            return{
                appointmentUid: doc.id,
                ...appointmentData
            }

        });
        await runTransaction(db, async (transaction) => {
        for (let i = 0; i < exitsAppointment.length; i++) {
            let appointment = exitsAppointment[i];
            console.log(appointment,"appointment")
            const timeTableCollection = doc(db, 'timeTable', appointment.appointmentTime.timetableId);
            const snapShotTimeTable = await getDoc(timeTableCollection); // Make sure to use await here
            if (snapShotTimeTable.exists()) {
                const timeTableData = snapShotTimeTable.data();
                const timeTableRemoveArray = timeTableData.appointmentList.filter(item => item.appointmentId !== appointment.appointmentUid);
                await updateDoc(timeTableCollection, { appointmentList: timeTableRemoveArray });
                const usersCollcetion = collection(db,"users");
                const userDataSnapShot = await getDocs(query(usersCollcetion,where('id', '==', appointment.appointmentId)));
                const exitUserDataSnapShot = userDataSnapShot.docs.map((doc) => {
                    const userData = doc.data();
                    return{
                        userDocId: doc.id,
                        ...userData
                    }
                });
                console.log(exitUserDataSnapShot[0].userLineID,"lineID")
                if(exitUserDataSnapShot[0].userLineID != ""){

                    const nodemailer = require('nodemailer');
                    const transporter = nodemailer.createTransport({
                        service: 'gmail',
                        auth: {
                            user: 'kmutthealthcareunit@gmail.com',
                            pass: 'vqos ixxk pscf bqwm'
                        }
                    })
                    const option = {
                        from: 'kmutthealthcareunit@gmail.com',
                        to: `${exitUserDataSnapShot[0].email}`,
                        subject: `[‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å]`,
                        html: `
                    
                        <img src="https://i.imgur.com/NKnMp3K.png" alt="HCU" style="width:100px;height:100px;margin-left: 10px;">
                        <h3 style="margin-left: 20px; margin-top: 0px;">‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏∏‡∏ì ${exitUserDataSnapShot[0].firstName}  ${exitUserDataSnapShot[0].lastName}</h3>
                        <p style="margin-left: 20px; margin-bottom: 40px;">üóìÔ∏è ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</b></p>
                        <p style="margin-left: 20px; margin-bottom: 40px;">‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ <b>${appointment.clinic}</b> ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà <b> ${appointment.appointmentDate}</b> ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏• : <b> ${req.body.note}</b> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ó‡πç‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏î‡πâ‡∏ß‡∏¢ ‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞</p>
                        <p style="margin-left: 20px"> <b>üôèüèª ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á!</p>
                        <p style="margin-left: 20px">‡∏´‡∏≤‡∏Å‡∏ó‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà, ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå https://hcukmutt.vercel.app/ ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ 02 470 8446 ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢</p>
                        <p style="margin-left: 20px; margin-bottom: 50px;">‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤ ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏≤‡∏´‡∏ß‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≤‡∏ô‡πÉ‡∏ô‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ</p>
                        
                        <div style="margin: 0px 20px; margin-bottom: 60px;">
                            <p>‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£: ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏†‡∏≤‡∏Ñ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤</p>
                            <ul>
                                <li>‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå - ‡∏ß‡∏±‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå: 08.30 - 18.00 ‡∏ô.</li>
                                <li>‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå: 08.30 - 16.30 ‡∏ô.</li>
                                <li>‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏ô‡∏±‡∏Å‡∏Ç‡∏±‡∏ï‡∏§‡∏Å‡∏©‡πå</li>
                            </ul>
                            <p>‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£: ‡∏ä‡πà‡∏ß‡∏á‡∏õ‡∏¥‡∏î‡∏†‡∏≤‡∏Ñ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤</p>
                            <ul>
                                <li>‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå - ‡∏ß‡∏±‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå: 08.30 - 16.30 ‡∏ô.</li>
                                <li>‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå, ‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå ‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏ô‡∏±‡∏Å‡∏Ç‡∏±‡∏ï‡∏§‡∏Å‡∏©‡πå</li>
                            </ul>
                        </div>
                    
                        <div style="margin-right: 20px;">
                            <p style="margin-left: 20px">‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏≤‡∏£‡∏û,</p>
                            <p style="margin-left: 20px">Health Care Unit KMUTT</p>
                            <p style="margin-left: 20px">‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏≠‡∏ô‡∏≤‡∏°‡∏±‡∏¢</p>
                            <p style="margin-left: 20px">02 470 8446</p>
                            <p style="margin-left: 20px">hcu@kmutt.ac.th</p>
                        </div>
                    `
                    }

                    transporter.sendMail(option, (err, info) => {
                        if (err) {
                            console.log('err', err)
                            return res.status(200).json({
                                RespCode: 400,
                                RespMessage: 'bad',
                                RespError: err
                            })
                        }
                        else {
                            console.log('Send: ' + info.response)
                            return res.status(200).json({
                                RespCode: 200,
                                RespMessage: 'good',
                            })
                        }
                    })

                    const body = {
                        "to": exitUserDataSnapShot[0].userLineID,
                        "messages":[
                            {
                                "type":"text",
                                "text": `‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å ‡∏ô‡∏±‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${appointment.appointmentDate} ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏• : ${req.body.note} ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ó‡πç‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏î‡πâ‡∏ß‡∏¢ ‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞` // Message content
                            }
                        ]
                    }
                    try {
                        const response = await axios.post(`${LINE_BOT_API}/push`, body, { headers });
                        console.log('Response:', response.data);
                    } catch (error) {
                        console.error('Error:', error);
                    }
                }
                const userRef = doc(db, 'users', exitUserDataSnapShot[0].userDocId);
                transaction.update(userRef, {
                    appointments: arrayRemove('appointments', exitUserDataSnapShot[0].userDocId),
                  });
                console.log(exitUserDataSnapShot[0].appointmentUid)
                const appointmentDocRef = doc(db, 'appointment', appointment.appointmentUid);
                transaction.delete(appointmentDocRef);
            } else {
                console.log("Document does not exist"); 
            }
            
           
        }
        });
        const newHoliday = await Holiday.create(req.body);
        res.json("success");
    } catch (error) {
        console.log(error, "create user");
        res.status(500).send("Internal Server Error"); 
    }
    
}));

module.exports = router;

